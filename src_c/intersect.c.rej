***************
*** 18,39 ****
  #include "ptv.h"
  
  
  /*-------------------------------------------------------------------------*/
  /* 2 cameras */
  
  
- void intersect_rt (double X1, double Y1, double Z1, double a1, double b1, double c1,
- 				   double X2, double Y2, double Z2, double a2, double b2, double c2,
- 				   double *X, double *Y, double *Z)
  /* intersection, given two points with direction cosines */
  /* only valid, if Z1 = Z2 = 0 , which is the case after ray tracing */
- {
- 	// ad holten, test first if lines are parallel
- 	if (a1/c1 == a2/c2 && b1/c1 == b2/c2) {		// if parallel, return high values 
- 		*X = *Y = *Z = 1e6;						// ie, out of the measuring volume
- 		return;
- 	}
  
  	if (fabs(b1-b2) > fabs(a1-a2)) *Z = (Y2-Y1) / ((b1/c1) - (b2/c2));
  	else						   *Z = (X2-X1) / ((a1/c1) - (a2/c2));
  	
--- 18,38 ----
  #include "ptv.h"
  
  
+ 
  /*-------------------------------------------------------------------------*/
  /* 2 cameras */
  
  
+ 
+ 
+ void intersect_rt (X1,Y1,Z1,a1,b1,c1,X2,Y2,Z2,a2,b2,c2,X,Y,Z)
+ 
+ double  X1, Y1, Z1, a1, b1, c1, X2, Y2, Z2, a2, b2, c2, *X, *Y, *Z;
+ 
  /* intersection, given two points with direction cosines */
  /* only valid, if Z1 = Z2 = 0 , which is the case after ray tracing */
  
+ {
  	if (fabs(b1-b2) > fabs(a1-a2)) *Z = (Y2-Y1) / ((b1/c1) - (b2/c2));
  	else						   *Z = (X2-X1) / ((a1/c1) - (a2/c2));
  	
***************
*** 42,52 ****
  }
  
  
- #ifdef EVER_CALLED		// Unused function, ad holten 12-2012
- void intersect (double X1, double Y1, double Z1, double a1, double b1, double c1,
- 				double X2, double Y2, double Z2, double a2, double b2, double c2,
- 				double *X, double *Y, double *Z)
  /* intersection, given two points with direction cosines */
  {
  	if (fabs(b1-b2) > fabs(a1-a2))
  		*Z = (Y2 - Y1 + Z1*(b1/c1) - Z2*(b2/c2)) / ((b1/c1) - (b2/c2));
--- 41,55 ----
  }
  
  
+ 
+ 
+ 
+ void intersect (X1,Y1,Z1,a1,b1,c1,X2,Y2,Z2,a2,b2,c2,X,Y,Z)
+ 
+ double  X1, Y1, Z1, a1, b1, c1, X2, Y2, Z2, a2, b2, c2, *X, *Y, *Z;
+ 
  /* intersection, given two points with direction cosines */
+ 
  {
  	if (fabs(b1-b2) > fabs(a1-a2))
  		*Z = (Y2 - Y1 + Z1*(b1/c1) - Z2*(b2/c2)) / ((b1/c1) - (b2/c2));
***************
*** 56,72 ****
  	*X = ( X1 + X2	+  *Z * (a1/c1 + a2/c2)) / 2;
  	*Y = ( Y1 + Y2	+  *Z * (b1/c1 + b2/c2)) / 2;
  }
- #endif
  
  /*-------------------------------------------------------------------------*/
  /* 3 cameras */
  
- #ifdef EVER_CALLED		// Unused function, ad holten 12-2012
- void intersect_rt_3 (double X1, double Y1, double Z1, double a1, double b1, double c1,
- 					 double X2, double Y2, double Z2, double a2, double b2, double c2,
- 					 double X3, double Y3, double Z3, double a3, double b3, double c3,
- 					 double *X, double *Y, double *Z)
  /* intersection, given three points with direction cosines */
  {
  	int    i, n_max;
  	double base[6], max_base=0;
--- 59,83 ----
  	*X = ( X1 + X2	+  *Z * (a1/c1 + a2/c2)) / 2;
  	*Y = ( Y1 + Y2	+  *Z * (b1/c1 + b2/c2)) / 2;
  }
+ 
+ 
+ 
+ 
  
  /*-------------------------------------------------------------------------*/
  /* 3 cameras */
  
+ 
+ 
+ 
+ 
+ void
+ intersect_rt_3 (X1,Y1,Z1,a1,b1,c1,X2,Y2,Z2,a2,b2,c2,X3,Y3,Z3,a3,b3,c3, X,Y,Z)
+ 
+ double	X1,Y1,Z1,a1,b1,c1, X2,Y2,Z2,a2,b2,c2, X3,Y3,Z3,a3,b3,c3, *X,*Y,*Z;
+ 
  /* intersection, given three points with direction cosines */
+ 
  {
  	int    i, n_max;
  	double base[6], max_base=0;
***************
*** 81,94 ****
  	base[4] = fabs (Y1 + Y3 - 2*Y2);
  	base[5] = fabs (Y2 + Y3 - 2*Y1);
  
- 	for (i=0; i<6; i++) 
- 		if (base[i] > max_base)
  	{
  		max_base = base[i];
  		n_max = i;
  	}
  
- 	switch (n_max) {
  		case 0: *Z = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: *Z = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
--- 92,105 ----
  	base[4] = fabs (Y1 + Y3 - 2*Y2);
  	base[5] = fabs (Y2 + Y3 - 2*Y1);
  
+ 	for (i=0; i<6; i++)	if (base[i] > max_base)
  	{
  		max_base = base[i];
  		n_max = i;
  	}
  
+ 	switch (n_max)
+ 	{
  		case 0: *Z = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: *Z = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
***************
*** 106,121 ****
  	*X = (X1+(*Z)*(a1/c1) + X2+(*Z)*(a2/c2) + X3+(*Z)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z)*(b1/c1) + Y2+(*Z)*(b2/c2) + Y3+(*Z)*(b3/c3)) / 3;
  }
- #endif
  
- #ifdef EVER_CALLED		// Unused function, ad holten 12-2012
- void intersect_rt_3m(double X1, double Y1, double Z1, double a1, double b1, double c1,
- 					 double X2, double Y2, double Z2, double a2, double b2, double c2,
- 					 double X3, double Y3, double Z3, double a3, double b3, double c3,
- 					 double *X, double *Y, double *Z)
  /* intersection, given three points with direction cosines */
  {
- 	int    i, n_max1=0, n_max2;
  	double base[6], max_base1=0, max_base2=0, Za, Zb;
  
  	/* find the maximum base component to decide, wether to take 
--- 117,136 ----
  	*X = (X1+(*Z)*(a1/c1) + X2+(*Z)*(a2/c2) + X3+(*Z)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z)*(b1/c1) + Y2+(*Z)*(b2/c2) + Y3+(*Z)*(b3/c3)) / 3;
  }
  
+ 
+ 
+ 
+ 
+ void
+ intersect_rt_3m (X1,Y1,Z1,a1,b1,c1,X2,Y2,Z2,a2,b2,c2,X3,Y3,Z3,a3,b3,c3, X,Y,Z)
+ 
+ double	X1,Y1,Z1,a1,b1,c1, X2,Y2,Z2,a2,b2,c2, X3,Y3,Z3,a3,b3,c3, *X,*Y,*Z;
+ 
  /* intersection, given three points with direction cosines */
+ 
  {
+ 	int		i, n_max1=0, n_max2=0;
  	double base[6], max_base1=0, max_base2=0, Za, Zb;
  
  	/* find the maximum base component to decide, wether to take 
***************
*** 128,150 ****
  	base[4] = fabs (Y1 + Y3 - 2*Y2);
  	base[5] = fabs (Y2 + Y3 - 2*Y1);
  
- 	for (i=0; i<6; i++) {
- 		if (base[i] > max_base1) {
- 			max_base2 = max_base1;
- 			max_base1 = base[i];
- 			n_max2 = n_max1;
- 			n_max1 = i;
- 		}
- 		else if (base[i] > max_base2) {
- 			max_base2 = base[i];
- 			n_max2 = i;
  		}
  	}
  
  	/* compute *Z from the 2 longest base components,
  	   what was empirically found to be the most accurate value */
  
- 	switch (n_max1) {
  		case 0: Za = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: Za = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
--- 143,166 ----
  	base[4] = fabs (Y1 + Y3 - 2*Y2);
  	base[5] = fabs (Y2 + Y3 - 2*Y1);
  
+ 	for (i=0; i<6; i++)
+ 	{
+ 		if (base[i] > max_base1)
+ 		{
+ 			max_base2 = max_base1;	max_base1 = base[i];
+ 			n_max2 = n_max1;		n_max1 = i;
+ 		}
+ 		else if (base[i] > max_base2)
+ 		{
+ 			max_base2 = base[i];	n_max2 = i;
  		}
  	}
  
  	/* compute *Z from the 2 longest base components,
  	   what was empirically found to be the most accurate value */
  
+ 	switch (n_max1)
+ 	{
  		case 0: Za = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: Za = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
***************
*** 158,164 ****
  		case 5: Za = (2*Y1 - Y2 - Y3) / ((b2/c2) + (b3/c3) - (2*b1/c1));
  				break;
  	}
- 	switch (n_max2) {
  		case 0: Zb = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: Zb = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
--- 174,181 ----
  		case 5: Za = (2*Y1 - Y2 - Y3) / ((b2/c2) + (b3/c3) - (2*b1/c1));
  				break;
  	}
+ 	switch (n_max2)
+ 	{
  		case 0: Zb = (2*X3 - X1 - X2) / ((a1/c1) + (a2/c2) - (2*a3/c3));
  				break;
  		case 1: Zb = (2*X2 - X1 - X3) / ((a1/c1) + (a3/c3) - (2*a2/c2));
***************
*** 174,191 ****
  	}
  	*Z = (Za + Zb) / 2;
  
  	*X = (X1+(*Z)*(a1/c1) + X2+(*Z)*(a2/c2) + X3+(*Z)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z)*(b1/c1) + Y2+(*Z)*(b2/c2) + Y3+(*Z)*(b3/c3)) / 3;
  }
- #endif
  
  
- #ifdef EVER_CALLED		// Unused function, ad holten 12-2012
- void intersect_3 (double X1, double Y1, double Z1, double a1, double b1, double c1,
- 				  double X2, double Y2, double Z2, double a2, double b2, double c2,
- 				  double X3, double Y3, double Z3, double a3, double b3, double c3,
- 				  double *X, double *Y, double *Z)
  /* intersection, given three points with direction cosines */
  {
  	int    i, n_min;
  	double base[6], min_base=1e20;
--- 191,211 ----
  	}
  	*Z = (Za + Zb) / 2;
  
+ 
  	*X = (X1+(*Z)*(a1/c1) + X2+(*Z)*(a2/c2) + X3+(*Z)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z)*(b1/c1) + Y2+(*Z)*(b2/c2) + Y3+(*Z)*(b3/c3)) / 3;
  }
  
  
+ 
+ 
+ 
+ void intersect_3 (X1,Y1,Z1,a1,b1,c1,X2,Y2,Z2,a2,b2,c2,X3,Y3,Z3,a3,b3,c3, X,Y,Z)
+ 
+ double	X1,Y1,Z1,a1,b1,c1, X2,Y2,Z2,a2,b2,c2, X3,Y3,Z3,a3,b3,c3, *X,*Y,*Z;
+ 
  /* intersection, given three points with direction cosines */
+ 
  {
  	int    i, n_min;
  	double base[6], min_base=1e20;
***************
*** 195,202 ****
  	base[0] = fabs (a1-a2);  base[1] = fabs (a1-a3);  base[2] = fabs (a2-a3);
  	base[3] = fabs (b1-b2);  base[4] = fabs (b1-b3);  base[5] = fabs (b2-b3);
  
- 	for (i=0; i<6; i++)
- 		if (base[i] < min_base)
  	{
  		min_base = base[i];
  		n_min = i;
--- 215,221 ----
  	base[0] = fabs (a1-a2);  base[1] = fabs (a1-a3);  base[2] = fabs (a2-a3);
  	base[3] = fabs (b1-b2);  base[4] = fabs (b1-b3);  base[5] = fabs (b2-b3);
  
+ 	for (i=0; i<6; i++)	if (base[i] < min_base)
  	{
  		min_base = base[i];
  		n_min = i;
***************
*** 212,218 ****
  	*X = (X1+(*Z-Z1)*(a1/c1) + X2+(*Z-Z2)*(a2/c2) + X3+(*Z-Z3)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z-Z1)*(b1/c1) + Y2+(*Z-Z2)*(b2/c2) + Y3+(*Z-Z3)*(b3/c3)) / 3;
  }
- #endif
  
  
  
--- 231,237 ----
  	*X = (X1+(*Z-Z1)*(a1/c1) + X2+(*Z-Z2)*(a2/c2) + X3+(*Z-Z3)*(a3/c3)) / 3;
  	*Y = (Y1+(*Z-Z1)*(b1/c1) + Y2+(*Z-Z2)*(b2/c2) + Y3+(*Z-Z3)*(b3/c3)) / 3;
  }
+ 
  
  
  
